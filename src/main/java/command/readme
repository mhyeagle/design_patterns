每个设计模式都应该由两部分组成：
第一部分是应用场景，即这个模式可以解决哪类问题；
第二部分是解决方案，即这个模式的设计思路和具体的代码实现。
不过，代码实现并不是模式必须包含的。如果你单纯地只关注解决方案这一部分，甚至只关注代码实现，就会产生大部分模式看起来都很相似的错觉。

命令模式用的最核心的实现手段，是将函数封装成对象。我们知道，C语言支持函数指针，我们可以把函数当作变量传递来传递去。
但是，在大部分编程语言中，函数没法儿作为参数传递给其他函数，也没法儿赋值给变量。
借助命令模式，我们可以将函数封装成对象。具体来说就是，设计一个包含这个函数的类，实例化一个对象传来传去，这样就可以实现把函数像对象一样使用。
从实现的角度来说，它类似我们之前讲过的回调。
当我们把函数封装成对象之后，对象就可以存储下来，方便控制执行。
所以，命令模式的主要作用和应用场景，是用来控制命令的执行，比如，异步、延迟、排队执行命令、撤销重做命令、存储命令、给命令记录日志等等，这才是命令模式能发挥独一无二作用的地方。